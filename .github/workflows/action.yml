name: Setup & Deploy AWS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Setup AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
          node-version: '18'

    - name: Cache node_modules
      id: cache-node_modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node_modules
      with:
        # caching node_modules
        path: node_modules # path for node_modules folder
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install dependencies
      run: npm install

    - name: Tests
      run: npm run test:action

    - name: Build
      run: npm run build:prod

    - name: Deploy
      if: success()
      run: aws s3 sync ./dist s3://${{secrets.AWS_S3_DEPLOY}} --delete

    - name: Invalidation
      if: success()
      run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_DISTRIBUTION_ID }} --paths "/*"

    # invalidate:
  #   runs-on: ubuntu-latest
  #   needs: deploy_prod
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: AWS CLI
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #     - name: Create CloudFront Invalidation
  #       run: aws cloudfront create-invalidation --distribution-id $AWS_DISTRIBUTION_ID --paths "/*"

    # - name: Cache node modules
    #   id: cache-nodemodules
    #   uses: actions/cache@v2
    #   env:
    #     cache-name: cache-node-modules
    #   with:
    #     # caching node_modules
    #     path: node_modules
    #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
    #     restore-keys: |
    #       ${{ runner.os }}-build-${{ env.cache-name }}-
    #       ${{ runner.os }}-build-
    #       ${{ runner.os }}-

  # unit_test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: "16"
  #     - name: Install Chrome
  #       run: |
  #         sudo apt-get update
  #         sudo wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
  #         sudo apt install -y ./google-chrome*.deb
  #         export CHROME_BIN=/usr/bin/google-chrome
  #     - name: Run Unit Tests
  #       run: npm run test -- --no-watch --browsers=ChromeHeadlessCI

  # build_app:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: "16"
  #     - name: Install Angular CLI
  #       run: npm install @angular/cli
  #     - name: Build Application
  #       run: npm run build:prod
  #     - name: Archive Artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: dist
  #         path: dist

  # deploy_prod:
  #   runs-on: ubuntu-latest
  #   needs: build_app
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: AWS CLI
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #     - name: Deploy to S3
  #       run: aws s3 sync dist s3://$AWS_S3_DEPLOY --delete

  # invalidate:
  #   runs-on: ubuntu-latest
  #   needs: deploy_prod
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: AWS CLI
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #     - name: Create CloudFront Invalidation
  #       run: aws cloudfront create-invalidation --distribution-id $AWS_DISTRIBUTION_ID --paths "/*"

  # test_deploy:
  #   runs-on: ubuntu-latest
  #   needs: invalidate
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Check Deployed Content
  #       run: curl $APP_BASE_URL | grep $GREP_CONTENT_TEST
